#!/bin/bash

###### appimage2deb: convert appimages to debain packaging
### Why ###
# I want to manage all applications with the debian package manager
# I want to scan any app that is not directly from the debian repos
# I want to automate for several systems
#
### ToDO ###
# remove the need for the optarg's and use my .bashrc deb and git variables
# add scanning of the contents for malware, trackers, vulnrabilities, create sbom
# add semantic versioning for sansnom and sign with sansnom gpg
#
### Depends on ###
# install the following packages: libappimage-dev wget squashfs-tools dpkg-dev
#
### martin stadler martin@sansnom.co.uk 31072024 ###
######


# Function to remind me how to use this script
usage() {
    echo "Usage: $0 -a <appimage_path> -m <maintainer> -d <description>"
    exit 1
}

# Parse command line arguments
while getopts "a:m:d:" opt; do
    case "${opt}" in
        a)
            APPIMAGE_PATH=${OPTARG}
            ;;
        m)
            MAINTAINER=${OPTARG}
            ;;
        d)
            DESCRIPTION=${OPTARG}
            ;;
        *)
            usage
            ;;
    esac
done

# Check if all arguments are provided
if [ -z "${APPIMAGE_PATH}" ] || [ -z "${MAINTAINER}" ] || [ -z "${DESCRIPTION}" ]; then
    usage
fi

# Check if the AppImage file exists
if [ ! -f "${APPIMAGE_PATH}" ]; then
    echo "Error: File not found at ${APPIMAGE_PATH}"
    exit 1
fi

# Fix the AppImage to have execute permissions
chmod +x "${APPIMAGE_PATH}"


# Create working directories
SCRIPT_DIR=$(dirname "$(realpath "$0")")
WORKDIR=$(mktemp -d)
APPDIR=${WORKDIR}/AppDir
DEBDIR=${WORKDIR}/deb

mkdir -p ${APPDIR} ${DEBDIR}/DEBIAN ${SCRIPT_DIR}/builds

# Extract the AppImage
cd ${WORKDIR}
"${APPIMAGE_PATH}" --appimage-extract

# Check if extraction was successful
if [ ! -d "squashfs-root" ]; then
    echo "Error: Failed to extract AppImage."
    exit 1
fi

# Extract metadata from the AppImage
DESKTOP_FILE=$(find squashfs-root -name "*.desktop" | head -n 1)
ICON_FILE=$(find squashfs-root -name ".DirIcon" | head -n 1)
APP_NAME=$(grep -m 1 "^Name=" "${DESKTOP_FILE}" | cut -d '=' -f 2 | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]\-+')

# Parse version and architecture from AppImage file name
APPIMAGE_BASENAME=$(basename "${APPIMAGE_PATH}")
VERSION=$(echo "${APPIMAGE_BASENAME}" | grep -oP '\d+\.\d+\.\d+')
ARCH=$(echo "${APPIMAGE_BASENAME}" | grep -oP 'x86_64|arm64|i386')

# Convert architecture to valid Debian architecture names
case "${ARCH}" in
    x86_64)
        ARCH="amd64"
        ;;
    *)
        ARCH=$(dpkg --print-architecture)
        ;;
esac

# Fallbacks if metadata is missing
APP_NAME=${APP_NAME:-$(basename ${APPIMAGE_PATH} .AppImage | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]\-+')}
VERSION=${VERSION:-1.0.0}

# Create control file
cat <<EOL > ${DEBDIR}/DEBIAN/control
Package: ${APP_NAME}
Version: ${VERSION}
Section: utils
Priority: optional
Architecture: ${ARCH}
Depends:
Maintainer: ${MAINTAINER}
Description: ${DESCRIPTION}
EOL

# Create postinst script to handle AppImage integration
cat <<EOL > ${DEBDIR}/DEBIAN/postinst
#!/bin/bash
ln -s /opt/${APP_NAME}/${APP_NAME}_${VERSION}.AppImage /opt/${APP_NAME}/${APP_NAME}
sudo chown root:root /opt/${APP_NAME}/${APP_NAME}_${VERSION}.AppImage /opt/${APP_NAME}/${APP_NAME}
/usr/bin/update-desktop-database
EOL
chmod 755 ${DEBDIR}/DEBIAN/postinst

# Create prerm script to remove symlink
cat <<EOL > ${DEBDIR}/DEBIAN/prerm
#!/bin/bash
rm /opt/${APP_NAME}/${APP_NAME}
/usr/bin/update-desktop-database
EOL
chmod 755 ${DEBDIR}/DEBIAN/prerm

# Copy AppImage to /opt
mkdir -p ${DEBDIR}/opt/${APP_NAME}
install -Dm755 ${APPIMAGE_PATH} ${DEBDIR}/opt/${APP_NAME}/${APP_NAME}_${VERSION}.AppImage

# Install icon
if [ -n "${ICON_FILE}" ]; then
    ICON_DEST=${DEBDIR}/usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png
    mkdir -p $(dirname ${ICON_DEST})
    install -Dm644 ${ICON_FILE} ${ICON_DEST}
else
    echo "Icon: ${ICON_FILE} not found"
fi

# Create .desktop file for GNOME integration if not found
if [ -z "${DESKTOP_FILE}" ]; then
    DESKTOP_FILE="${WORKDIR}/${APP_NAME}.desktop"
    cat <<EOL > ${DESKTOP_FILE}
[Desktop Entry]
Type=Application
Name=${APP_NAME}
Exec=/opt/${APP_NAME}/${APP_NAME}
Icon=${APP_NAME}
Terminal=false
Categories=Utility;
EOL
fi

# Install desktop file
DESKTOP_DEST=${DEBDIR}/usr/share/applications/${APP_NAME}.desktop
mkdir -p $(dirname ${DESKTOP_DEST})
install -Dm644 ${DESKTOP_FILE} ${DESKTOP_DEST}
# Update Exec and Icon fields in the desktop file
sed -i "s|^Exec=.*|Exec=/opt/${APP_NAME}/${APP_NAME}|" ${DESKTOP_DEST}
sed -i "s|^Icon=.*|Icon=${APP_NAME}|" ${DESKTOP_DEST}

# Build the Debian package
OUTPUT_PATH="${SCRIPT_DIR}/builds/${APP_NAME}_${VERSION}_${ARCH}.deb"
dpkg-deb --build ${DEBDIR} "${OUTPUT_PATH}"

# Cleanup
rm -rf ${WORKDIR}

echo "Debian package created successfully: ${OUTPUT_PATH}"

